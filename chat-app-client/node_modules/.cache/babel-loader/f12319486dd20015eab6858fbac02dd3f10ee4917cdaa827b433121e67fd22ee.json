{"ast":null,"code":"var _jsxFileName = \"/Users/kobepane/Documents/CIT 382/chat-app/chat-app-client/src/App.js\",\n  _s = $RefreshSig$();\n// import ReactDOM from \"react-dom/client\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { Login } from \"./login\";\nimport { Chat } from \"./chat\";\nimport { example_users } from \"./sampleData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  // Declare state variables and functions to be passed down into Login component; then lifted back into App component;\n  // then passed down into Chat component\n\n  // The socket room should just be specified by the chat state variable and passed into the Chat component, so that the\n  // Chat component knows what socket room to connect the user to, and also has their username and country to add that data\n  // into the Map object to store the users for a particular room.\n\n  // The pie graph, as well as user list should be based off current users in the specific room, which should be kept in the\n  // Map object (need to learn about it) or whatever data structure we decide to keep on the server for that.\n\n  // The previous chat messages for a certain room will need to be kept in a database, and queried for each user as they\n  // join a chat and basically set as the initial value for the messages state variable. Something that will need to be added\n  // is as a message is sent, it will also need to be added into that database for the specfic room.\n\n  const [username, setUsername] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  // Adding for the search countries\n  const [filteredCountries, setFilteredCountries] = useState([]);\n  const [chat, setChat] = useState(\"\");\n  function changeUsername(e) {\n    setUsername(e.target.value);\n  }\n  function changeChat(e) {\n    setChat(e.target.value);\n  }\n  function changeCountry(selectedCountry) {\n    setCountry(selectedCountry.value);\n  }\n  function handleCountryClick(country) {\n    return;\n  }\n  useEffect(() => {\n    const storedUsername = localStorage.getItem(\"username\");\n    if (storedUsername) {\n      setUsername(storedUsername);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Login, {\n          username: username,\n          country: country,\n          filteredCountries: filteredCountries,\n          chat: chat,\n          changeUsername: changeUsername,\n          changeCountry: changeCountry,\n          changeChat: changeChat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/Chat\",\n        element: /*#__PURE__*/_jsxDEV(Chat, {\n          username: username,\n          country: country,\n          chat: chat,\n          example_users: example_users\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"gFnkpoQLiZCQQYVgYwbR4byoIbw=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Routes","Route","Login","Chat","example_users","jsxDEV","_jsxDEV","App","_s","username","setUsername","country","setCountry","filteredCountries","setFilteredCountries","chat","setChat","changeUsername","e","target","value","changeChat","changeCountry","selectedCountry","handleCountryClick","storedUsername","localStorage","getItem","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kobepane/Documents/CIT 382/chat-app/chat-app-client/src/App.js"],"sourcesContent":["// import ReactDOM from \"react-dom/client\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { Login } from \"./login\";\nimport { Chat } from \"./chat\";\nimport { example_users } from \"./sampleData\";\n\nexport default function App() {\n  // Declare state variables and functions to be passed down into Login component; then lifted back into App component;\n  // then passed down into Chat component\n\n  // The socket room should just be specified by the chat state variable and passed into the Chat component, so that the\n  // Chat component knows what socket room to connect the user to, and also has their username and country to add that data\n  // into the Map object to store the users for a particular room.\n\n  // The pie graph, as well as user list should be based off current users in the specific room, which should be kept in the\n  // Map object (need to learn about it) or whatever data structure we decide to keep on the server for that.\n\n  // The previous chat messages for a certain room will need to be kept in a database, and queried for each user as they\n  // join a chat and basically set as the initial value for the messages state variable. Something that will need to be added\n  // is as a message is sent, it will also need to be added into that database for the specfic room.\n\n  const [username, setUsername] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  // Adding for the search countries\n  const [filteredCountries, setFilteredCountries] = useState([]);\n  const [chat, setChat] = useState(\"\");\n\n  function changeUsername(e) {\n    setUsername(e.target.value);\n  }\n\n  function changeChat(e) {\n    setChat(e.target.value);\n  }\n\n  function changeCountry(selectedCountry) {\n    setCountry(selectedCountry.value);\n  }\n\n  function handleCountryClick(country) {\n    return;\n  }\n\n  useEffect(() => {\n    const storedUsername = localStorage.getItem(\"username\");\n    if (storedUsername) {\n      setUsername(storedUsername);\n    }\n  }, []);\n\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route\n          path=\"/\"\n          element={\n            <Login\n              username={username}\n              country={country}\n              filteredCountries={filteredCountries}\n              chat={chat}\n              changeUsername={changeUsername}\n              changeCountry={changeCountry}\n              changeChat={changeChat}\n            />\n          }\n        />\n        <Route\n          path=\"/Chat\"\n          element={\n            <Chat\n              username={username}\n              country={country}\n              chat={chat}\n              example_users={example_users}\n            />\n          }\n        />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AAC/D,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,IAAI,QAAQ,QAAQ;AAC7B,SAASC,aAAa,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC1C;EACA,MAAM,CAACgB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACkB,IAAI,EAAEC,OAAO,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAEpC,SAASoB,cAAcA,CAACC,CAAC,EAAE;IACzBR,WAAW,CAACQ,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC7B;EAEA,SAASC,UAAUA,CAACH,CAAC,EAAE;IACrBF,OAAO,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACzB;EAEA,SAASE,aAAaA,CAACC,eAAe,EAAE;IACtCX,UAAU,CAACW,eAAe,CAACH,KAAK,CAAC;EACnC;EAEA,SAASI,kBAAkBA,CAACb,OAAO,EAAE;IACnC;EACF;EAEAb,SAAS,CAAC,MAAM;IACd,MAAM2B,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACvD,IAAIF,cAAc,EAAE;MAClBf,WAAW,CAACe,cAAc,CAAC;IAC7B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEnB,OAAA,CAACP,aAAa;IAAA6B,QAAA,eACZtB,OAAA,CAACN,MAAM;MAAA4B,QAAA,gBACLtB,OAAA,CAACL,KAAK;QACJ4B,IAAI,EAAC,GAAG;QACRC,OAAO,eACLxB,OAAA,CAACJ,KAAK;UACJO,QAAQ,EAAEA,QAAS;UACnBE,OAAO,EAAEA,OAAQ;UACjBE,iBAAiB,EAAEA,iBAAkB;UACrCE,IAAI,EAAEA,IAAK;UACXE,cAAc,EAAEA,cAAe;UAC/BK,aAAa,EAAEA,aAAc;UAC7BD,UAAU,EAAEA;QAAW;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB;MACF;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACF5B,OAAA,CAACL,KAAK;QACJ4B,IAAI,EAAC,OAAO;QACZC,OAAO,eACLxB,OAAA,CAACH,IAAI;UACHM,QAAQ,EAAEA,QAAS;UACnBE,OAAO,EAAEA,OAAQ;UACjBI,IAAI,EAAEA,IAAK;UACXX,aAAa,EAAEA;QAAc;UAAA2B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B;MACF;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEpB;AAAC1B,EAAA,CA3EuBD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}